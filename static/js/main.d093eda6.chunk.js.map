{"version":3,"sources":["components/Header.tsx","components/Home.tsx","components/DenseTable.tsx","components/GigList.tsx","components/GigDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","theme","addedTodayNonZero","backgroundColor","palette","success","main","paddingLeft","paddingRight","borderRadius","Home","useTheme","styles","useState","isLoading","setIsLoading","lastUpdated","Date","shows","showsInfo","setShowsInfo","isRecentlyAdded","show","thresholdInDays","addedDate","currentDate","millisecondsSinceAdded","getTime","millisecondsPerDay","thresholdInMilliseconds","result","useEffect","a","console","log","fetch","responseJson","json","response","fetchShowsInfo","eventsAddedTodayCount","filter","length","haveEventsAddedToday","ThemeProvider","elevation","square","style","height","Grid","container","direction","justify","spacing","item","Backdrop","open","CircularProgress","color","alignItems","Button","variant","component","Link","to","fullWidth","Chip","size","label","date","eventDate","setHours","isFutureEvent","undefined","StyledTableCell","withStyles","head","primary","contrastText","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","table","DenseTable","props","showPastEvents","days","dateRangeShowFilter","addedDateRangeShowFilter","TableContainer","Table","aria-label","TableHead","Hidden","smDown","TableBody","inEventDateRangeShows","getRelevantShows","map","key","Math","random","toLocaleDateString","weekday","year","month","day","getDateFormatted","artists","artist","id","name","venue","isSoldOut","warning","isCancelled","error","priceText","indexOf","info","notes","GigList","useParams","showPastEventsParam","daysParam","minWidth","bullet","display","margin","transform","pos","marginBottom","GigDetails","routeParams","find","getShowById","getDayName","alignContent","xs","Card","CardContent","gutterBottom","stageTime","videoUrl","href","CardActions","App","createMuiTheme","type","secondary","basename","process","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d093eda6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Recommended Gigs\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Paper, Grid, ThemeProvider, Button, Backdrop, CircularProgress, Chip, useTheme, Theme } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    addedTodayNonZero: {\r\n        backgroundColor: theme.palette.success.main,\r\n        paddingLeft: 50,\r\n        paddingRight: 50,\r\n        borderRadius: 5\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    isDarkMode: boolean;\r\n    setIsDarkMode: Function;\r\n}\r\n\r\nconst Home: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n    const theme = useTheme();\r\n    const styles = useStyles();\r\n\r\n    // const [isDarkMode, setIsDarkMode] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n        lastUpdated: new Date(),\r\n        shows: []\r\n    });\r\n\r\n    // const theme = createMuiTheme({\r\n    //     palette: {\r\n    //         type: isDarkMode ? \"dark\" : \"light\",\r\n    //         primary: {\r\n    //             main: '#0b5994',\r\n    //         },\r\n    //         secondary: {\r\n    //             main: '#1d83c6',\r\n    //         },\r\n    //     },\r\n    // });\r\n\r\n    const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n        if (!show.addedDate) {\r\n            return false;\r\n        }\r\n\r\n        const addedDate = new Date(show.addedDate);\r\n        const currentDate = new Date();\r\n\r\n        const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n        const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n        const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n        const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n        return result;\r\n    };\r\n\r\n    const isFutureEvent = (show: Show) => {\r\n        if (!show.date) {\r\n            return false;\r\n        }\r\n\r\n        const eventDate = new Date(show.date);\r\n        eventDate.setHours(23, 59, 0, 0);\r\n\r\n        let currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0);\r\n\r\n        return eventDate >= currentDate;\r\n    };\r\n\r\n    const getAllShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows;\r\n    }\r\n\r\n    const getFutureShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => isFutureEvent(show));\r\n    }\r\n\r\n    const getAddedTodayShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 1);\r\n        });\r\n    }\r\n\r\n    const getAddedWithin3DaysShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 3);\r\n        });\r\n    }\r\n\r\n    const getAddedWithin7DaysShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 7);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchShowsInfo = async () => {\r\n            console.log(\"fetchShowsInfo\");\r\n\r\n            const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n            const responseJson = await fetch(url);\r\n\r\n            const response: ShowsInfo = await responseJson.json();\r\n\r\n            console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n            setShowsInfo(response);\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchShowsInfo();\r\n\r\n    }, []);\r\n\r\n    const eventsAddedTodayCount = getAddedTodayShows().length;\r\n    const haveEventsAddedToday = eventsAddedTodayCount > 0;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Paper elevation={0} square style={{ height: \"100vh\" }}>\r\n                <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n                    <Grid item>\r\n                        <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n                    </Grid>\r\n                    {\r\n                        isLoading ? <Backdrop open={true}><CircularProgress color=\"inherit\" /></Backdrop> : (\r\n                            <Grid item container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"stretch\">\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"primary\" component={Link} to={'/giglist/false'} fullWidth>\r\n                                        <span>Future Events</span>&nbsp;\r\n                                        {\" \"}\r\n                                        <Chip variant=\"default\" color=\"secondary\" size=\"small\" label={getFutureShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/false/1'} fullWidth>\r\n                                        <div className={haveEventsAddedToday ? styles.addedTodayNonZero : undefined}>\r\n                                            Added Today&nbsp;\r\n                                            <Chip variant=\"default\" color=\"primary\" size=\"small\" label={eventsAddedTodayCount} />\r\n                                        </div>\r\n                                        {/* {isLoading ? null : <span>&nbsp;({getAddedTodayShows().length})</span>} */}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/false/3'} fullWidth>\r\n                                        <span>\r\n                                            Added In Last 3 Days\r\n                                        </span>&nbsp;\r\n                                        {/* {isLoading ? null : <span>&nbsp;({getAddedWithin3DaysShows().length})</span>} */}\r\n                                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={getAddedWithin3DaysShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/false/7'} fullWidth>\r\n                                        <span>\r\n                                            Added In Last 7 Days\r\n                                        </span>&nbsp;\r\n                                        {/* {isLoading ? null : <span>&nbsp;({getAddedWithin7DaysShows().length})</span>} */}\r\n                                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={getAddedWithin7DaysShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/true/-1'} fullWidth>\r\n                                        <span>All Events</span>&nbsp;\r\n                                        {\" \"}\r\n                                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={getAllShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport {\r\n  CircularProgress,\r\n  Backdrop,\r\n  Chip,\r\n  Grid,\r\n  Hidden,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    // backgroundColor: theme.palette.common.black,\r\n    // color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // minWidth: 650,\r\n    // maxWidth: 500\r\n  },\r\n});\r\n\r\nconst getDayName = (date: Date) => {\r\n  return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n};\r\n\r\nconst getDateFormatted = (date: Date) => {\r\n  const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n  return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n};\r\n\r\ninterface Props {\r\n  showPastEvents: boolean;\r\n\r\n  days?: number;\r\n}\r\n\r\nconst DenseTable: React.FC<Props> = (props) => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showPastEvents] = useState(props.showPastEvents);\r\n  const [days] = useState(props.days);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [\r\n      // {\r\n      //     id: \"1\",\r\n      //     venue: \"Fleece\",\r\n      //     artists: [\r\n      //         {\r\n      //             name: \"Chuck P\"\r\n      //         }\r\n      //     ],\r\n      //     isCancelled: false,\r\n      //     isSoldOut: false,\r\n      //     date: new Date()\r\n      // }\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n    if (!show.addedDate) {\r\n      return false;\r\n    }\r\n\r\n    const addedDate = new Date(show.addedDate);\r\n    const currentDate = new Date();\r\n\r\n    const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n    const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n    const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n    return result;\r\n  };\r\n\r\n  // const getInDateRangeShows = (): Show[] => {\r\n  //     if (!showsInfo) {\r\n  //         return [];\r\n  //     }\r\n\r\n  //     const { shows } = showsInfo;\r\n\r\n  //     if (showPastEvents) {\r\n  //         return shows;\r\n  //     }\r\n\r\n  //     const results = shows.filter(dateRangeShowFilter);\r\n\r\n  //     return results;\r\n  // }\r\n\r\n  const isFutureEvent = (show: Show) => {\r\n    if (!show.date) {\r\n      return false;\r\n    }\r\n\r\n    const eventDate = new Date(show.date);\r\n    eventDate.setHours(23, 59, 0, 0);\r\n\r\n    let currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    return eventDate >= currentDate;\r\n  };\r\n\r\n  const dateRangeShowFilter = (show: Show) => {\r\n    let willShowEvent = false;\r\n\r\n    if (showPastEvents) {\r\n      willShowEvent = true;\r\n    } else {\r\n      willShowEvent = isFutureEvent(show);\r\n    }\r\n\r\n    return willShowEvent;\r\n  };\r\n\r\n  const addedDateRangeShowFilter = (show: Show) => {\r\n    let willShowEvent = false;\r\n\r\n    if (days === -1) {\r\n      willShowEvent = true;\r\n    } else {\r\n      willShowEvent = isRecentlyAdded(show, days);\r\n    }\r\n\r\n    return willShowEvent;\r\n  };\r\n\r\n  // const getInAddedDateRangeShows = (shows: Show[]): Show[] => {\r\n  //     if (!shows) {\r\n  //         return [];\r\n  //     }\r\n\r\n  //     // const { shows } = showsInfo;\r\n\r\n  //     if (days === -1) {\r\n  //         return shows;\r\n  //     }\r\n\r\n  //     const inEventDateRangeShows = shows.filter(dateRangeShowFilter);\r\n\r\n  //     const results = inEventDateRangeShows.filter(show => addedDateRangeShowFilter(show));\r\n\r\n  //     return results;\r\n  // }\r\n\r\n  const getRelevantShows = (): Show[] => {\r\n    // if (!shows) {\r\n    //     return [];\r\n    // }\r\n\r\n    const { shows } = showsInfo;\r\n\r\n    const inEventDateRangeShows = shows.filter(dateRangeShowFilter);\r\n\r\n    if (days === -1) {\r\n      return inEventDateRangeShows;\r\n    }\r\n\r\n    const results = inEventDateRangeShows.filter(addedDateRangeShowFilter);\r\n\r\n    return results;\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    <TableContainer component={Paper} square>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <Hidden smDown>\r\n              <StyledTableCell>Day</StyledTableCell>\r\n            </Hidden>\r\n            <StyledTableCell>Date</StyledTableCell>\r\n            <StyledTableCell>Artists</StyledTableCell>\r\n            <StyledTableCell>Venue</StyledTableCell>\r\n            <StyledTableCell>Actions</StyledTableCell>\r\n            <StyledTableCell>&nbsp;</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {/* {showsInfo.shows.filter(show => new Date(show.date) >= new Date()).map((show) => ( */}\r\n          {getRelevantShows().map((show) => (\r\n            <StyledTableRow key={Math.random()}>\r\n              <Hidden smDown>\r\n                <StyledTableCell>{getDayName(show.date)}</StyledTableCell>\r\n              </Hidden>\r\n              <StyledTableCell>{getDateFormatted(show.date)}</StyledTableCell>\r\n              <StyledTableCell>\r\n                {/* <pre>\r\n                                    {JSON.stringify(show, null, 2)}\r\n                                </pre> */}\r\n                {show.artists.map((artist) => {\r\n                  return (\r\n                    <p key={`${show.id}.${artist.name}`}>\r\n                      {artist.name}\r\n\r\n                      {/* <span *ngIf=\"artist.stageTime\"\r\n                                          class=\"badge badge-pill badge-primary\"\r\n                                          style=\"margin-right: 10px;\"\r\n                                          title=\"Stage Time\">\r\n                                          {{artist.stageTime}}\r\n                                        </span>\r\n                          \r\n                                        <a *ngIf=\"artist.videoUrl\" [attr.href]=\"artist.videoUrl\">\r\n                                          <span\r\n                                            class=\"badge badge-danger\"\r\n                                            style=\"margin-right: 10px;\">\r\n                                            Video\r\n                                          </span>\r\n                                        </a> */}\r\n                    </p>\r\n                  );\r\n                })}\r\n              </StyledTableCell>\r\n              <StyledTableCell>{show.venue}</StyledTableCell>\r\n              <StyledTableCell>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  component={Link}\r\n                  to={`/gigdetails/${show.id}`}\r\n                >\r\n                  <span>View</span>\r\n                </Button>\r\n              </StyledTableCell>\r\n              <StyledTableCell>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                  {show.isSoldOut && (\r\n                    <Grid item>\r\n                      <Chip\r\n                        style={{\r\n                          backgroundColor: theme.palette.warning.main,\r\n                          color: theme.palette.warning.contrastText,\r\n                        }}\r\n                        size=\"small\"\r\n                        label=\"Sold Out\"\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  {show.isCancelled && (\r\n                    <Grid item>\r\n                      <Chip\r\n                        style={{\r\n                          backgroundColor: theme.palette.error.main,\r\n                          color: theme.palette.error.contrastText,\r\n                        }}\r\n                        size=\"small\"\r\n                        label=\"Cancelled\"\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  {show.priceText && show.priceText.indexOf(\"£\") === 0 && (\r\n                    <Grid item>\r\n                      <Chip\r\n                        style={{\r\n                          backgroundColor: theme.palette.info.main,\r\n                          color: theme.palette.info.contrastText,\r\n                        }}\r\n                        size=\"small\"\r\n                        label={show.priceText}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  {show.notes && (\r\n                    <Grid item>\r\n                      <span\r\n                        style={\r\n                          {\r\n                            // backgroundColor: theme.palette.info.main,\r\n                            // color: theme.palette.info.contrastText\r\n                          }\r\n                        }\r\n                      >\r\n                        {show.notes}\r\n                      </span>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                {/* \r\n\r\n            <span *ngIf=\"show.priceText && show.priceText.indexOf('£') === 0\"\r\n              class=\"badge badge-info\" style=\"margin-right: 10px;\">\r\n              {{show.priceText}}\r\n            </span>\r\n\r\n            <span *ngIf=\"show.notes\" style=\"margin-right: 10px;\">{{show.notes}}</span> */}\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DenseTable;\r\n","import React from \"react\";\r\nimport { Paper, Grid, ThemeProvider, useTheme } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport DenseTable from \"./DenseTable\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n\r\n  // match?: any;\r\n}\r\n\r\n// interface RouterProps {\r\n//     match: any;\r\n// }\r\n\r\n// type PropsWithRouterParams = Props & RouterProps;\r\n\r\nconst GigList: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  // const theme = createMuiTheme({\r\n  //     palette: {\r\n  //         type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n  //         primary: {\r\n  //             main: '#0b5994',\r\n  //         },\r\n  //         secondary: {\r\n  //             main: '#1d83c6',\r\n  //         },\r\n  //     },\r\n  // });\r\n\r\n  const { showPastEvents, days } = useParams();\r\n  const showPastEventsParam = showPastEvents === \"true\";\r\n  const daysParam = days === undefined ? -1 : +days;\r\n\r\n  // console.log(showPastEvents, showPastEventsParam);\r\n  // const propsAsAny = props as any;\r\n  // const { isDarkMode, setIsDarkMode } = propsAsAny;\r\n  // const match = propsAsAny.match;\r\n  // const showPastEvents = match && match.params && match.params.showPastEvents;\r\n\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          <Grid item container justify=\"center\">\r\n            <DenseTable showPastEvents={showPastEventsParam} days={daysParam} />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default GigList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useTheme,\r\n  Grid,\r\n  Chip,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ShowsInfo } from \"../models/models\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst GigDetails: React.FC = () => {\r\n  const routeParams = useParams<RouteParams>();\r\n\r\n  const classes = useStyles();\r\n  // const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  const theme = useTheme();\r\n  // const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [id] = useState(routeParams.id);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls\r\n      // https://firebase.google.com/docs/reference/rest/database/\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const getShowById = (id: string) => {\r\n    const idMatch = showsInfo.shows.find((show) => show.id && show.id === id);\r\n\r\n    return idMatch;\r\n  };\r\n\r\n  const show = getShowById(id);\r\n\r\n  const getDayName = (date: Date) => {\r\n    return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n  };\r\n\r\n  const getDateFormatted = (date: Date) => {\r\n    const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n    return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"stretch\"\r\n      alignContent=\"stretch\"\r\n      style={{ height: \"100%\" }}\r\n    >\r\n      {/* <h1>Gig Details</h1>\r\n      <h2>id = [{id}]</h2>\r\n\r\n      <h3>Details</h3> */}\r\n\r\n      <Grid item xs={12}>\r\n        {!show && <h1>Event not found</h1>}\r\n\r\n        {show && (\r\n          <Card className={classes.root} variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography\r\n                className={classes.title}\r\n                color=\"textSecondary\"\r\n                gutterBottom\r\n              >\r\n                {getDayName(show.date)}, {getDateFormatted(show.date)}\r\n              </Typography>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                {show.artists[0].name}\r\n              </Typography>\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n                {show.venue}\r\n              </Typography>\r\n              <Typography variant=\"body2\" component=\"div\">\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Artists\r\n                </Typography>\r\n                {show.artists.map((artist) => {\r\n                  return (\r\n                    <div key={`${show.id}.${artist.name}`}>\r\n                      {artist.name}&nbsp;\r\n                      {artist.stageTime && (\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.info.main,\r\n                            color: theme.palette.info.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label={artist.stageTime}\r\n                        />\r\n                      )}\r\n                      &nbsp;\r\n                      {artist.videoUrl && (\r\n                        <a href={artist.videoUrl}>\r\n                          <Chip\r\n                            style={{\r\n                              backgroundColor: theme.palette.info.main,\r\n                              color: theme.palette.info.contrastText,\r\n                            }}\r\n                            size=\"small\"\r\n                            label=\"Video\"\r\n                          />\r\n                        </a>\r\n                      )}\r\n                      &nbsp;\r\n                    </div>\r\n                  );\r\n                })}\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                  {show.isSoldOut && (\r\n                    <Grid item>\r\n                      <Chip\r\n                        style={{\r\n                          backgroundColor: theme.palette.warning.main,\r\n                          color: theme.palette.warning.contrastText,\r\n                        }}\r\n                        size=\"small\"\r\n                        label=\"Sold Out\"\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  {show.isCancelled && (\r\n                    <Grid item>\r\n                      <Chip\r\n                        style={{\r\n                          backgroundColor: theme.palette.error.main,\r\n                          color: theme.palette.error.contrastText,\r\n                        }}\r\n                        size=\"small\"\r\n                        label=\"Cancelled\"\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  {show.priceText && show.priceText.indexOf(\"£\") === 0 && (\r\n                    <Grid item>\r\n                      <Chip\r\n                        style={{\r\n                          backgroundColor: theme.palette.info.main,\r\n                          color: theme.palette.info.contrastText,\r\n                        }}\r\n                        size=\"small\"\r\n                        label={show.priceText}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  {show.notes && (\r\n                    <Grid item>\r\n                      <span\r\n                        style={\r\n                          {\r\n                            // backgroundColor: theme.palette.info.main,\r\n                            // color: theme.palette.info.contrastText\r\n                          }\r\n                        }\r\n                      >\r\n                        {show.notes}\r\n                      </span>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              {/* <Button size=\"small\">Learn More</Button> */}\r\n              {show.addedDate && (\r\n                <>\r\n                  <div>\r\n                    <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n                      Added: {getDayName(show.addedDate)},{\" \"}\r\n                      {getDateFormatted(show.addedDate)}\r\n                    </Typography>\r\n                  </div>\r\n                  <br />\r\n                </>\r\n              )}\r\n              {show.id && (\r\n                <div>\r\n                  <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n                    Id: {show.id}\r\n                  </Typography>\r\n                </div>\r\n              )}\r\n            </CardActions>\r\n          </Card>\r\n        )}\r\n\r\n        {/* <pre>{JSON.stringify(getShowById(id), null, 2)}</pre> */}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default GigDetails;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n// import { blue, green, amber, blueGrey, red, cyan, indigo, lightBlue, grey, teal } from \"@material-ui/core/colors\";\r\n\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Home from \"./components/Home\";\r\nimport GigList from \"./components/GigList\";\r\nimport GigDetails from \"./components/GigDetails\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: \"#0b5994\",\r\n      },\r\n      secondary: {\r\n        main: \"#1d83c6\",\r\n      },\r\n    },\r\n  });\r\n\r\n  // const theme = createMuiTheme({\r\n  //   palette: {\r\n  //     type: isDarkMode ? \"dark\" : \"light\",\r\n  //     primary: blue,\r\n  //     secondary: blue,\r\n  //   },\r\n  // });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          {/* <Route path=\"/\" exact component={Home} /> */}\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route\r\n            path=\"/giglist/:showPastEvents/:days?\"\r\n            exact\r\n            render={() => (\r\n              <GigList isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route path=\"/gigdetails/:id\" exact render={() => <GigDetails />} />\r\n\r\n          {/* <Route path=\"/\" render={() => <div>404</div>} /> */}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  //   <App />\r\n  // </React.StrictMode>,\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}