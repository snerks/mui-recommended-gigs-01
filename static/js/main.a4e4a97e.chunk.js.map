{"version":3,"sources":["components/Header.tsx","components/Home.tsx","components/DenseTable.tsx","components/GigList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","Home","useState","isLoading","setIsLoading","lastUpdated","Date","shows","showsInfo","setShowsInfo","theme","createMuiTheme","palette","type","primary","blue","secondary","isRecentlyAdded","show","thresholdInDays","addedDate","currentDate","millisecondsSinceAdded","getTime","millisecondsPerDay","thresholdInMilliseconds","result","useEffect","a","console","log","fetch","responseJson","json","response","fetchShowsInfo","ThemeProvider","elevation","square","style","height","Grid","container","direction","justify","spacing","item","Backdrop","open","CircularProgress","color","alignItems","Button","variant","component","Link","to","fullWidth","length","filter","StyledTableCell","withStyles","head","backgroundColor","common","black","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","table","DenseTable","useTheme","TableContainer","Table","size","aria-label","TableHead","TableBody","date","map","key","Math","random","toLocaleDateString","year","month","day","artists","artist","id","name","venue","isSoldOut","Chip","warning","main","contrastText","label","isCancelled","error","priceText","indexOf","info","notes","GigList","App","basename","process","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a4e4a97e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Recommended Gigs\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Paper, Grid, createMuiTheme, ThemeProvider, Button, Backdrop, CircularProgress } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\n\r\nconst Home: React.FC = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n        lastUpdated: new Date(),\r\n        shows: []\r\n    });\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n            primary: blue,\r\n            secondary: blue,\r\n        },\r\n    });\r\n\r\n    const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n        if (!show.addedDate) {\r\n            return false;\r\n        }\r\n\r\n        const addedDate = new Date(show.addedDate);\r\n        const currentDate = new Date();\r\n\r\n        const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n        const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n        const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n        const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n        return result;\r\n\r\n    };\r\n\r\n    const getAllShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows;\r\n    }\r\n\r\n    const getAddedTodayShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 1);\r\n        });\r\n    }\r\n\r\n    const getAddedWithin3DaysShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 3);\r\n        });\r\n    }\r\n\r\n    const getAddedWithin7DaysShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 7);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchShowsInfo = async () => {\r\n            console.log(\"fetchShowsInfo\");\r\n\r\n            const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n            const responseJson = await fetch(url);\r\n\r\n            const response: ShowsInfo = await responseJson.json();\r\n\r\n            console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n            setShowsInfo(response);\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchShowsInfo();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n                <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n                    <Grid item>\r\n                        <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n                    </Grid>\r\n                    {\r\n                        isLoading ? <Backdrop open={true}><CircularProgress color=\"inherit\" /></Backdrop> : (\r\n                            <Grid item container direction=\"column\" spacing={2} alignItems=\"center\">\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"primary\" component={Link} to={'/giglist'} fullWidth>\r\n                                        Gig List {isLoading ? null : <span>&nbsp;({getAllShows().length})</span>}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist'}>\r\n                                        Added Today {isLoading ? null : <span>&nbsp;({getAddedTodayShows().length})</span>}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist'}>\r\n                                        Added In Last 3 Days {isLoading ? null : <span>&nbsp;({getAddedWithin3DaysShows().length})</span>}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist'}>\r\n                                        Added In Last 7 Days {isLoading ? null : <span>&nbsp;({getAddedWithin7DaysShows().length})</span>}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, withStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ShowsInfo } from '../models/models';\r\nimport { CircularProgress, Backdrop, Chip, Grid } from '@material-ui/core';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 650,\r\n        // maxWidth: 500\r\n    },\r\n});\r\n\r\nconst getDayName = (date: Date) => {\r\n    return new Date(date).toLocaleDateString(\"en-GB\", { weekday: 'short' });\r\n}\r\n\r\nconst getDateFormatted = (date: Date) => {\r\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n\r\n    return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n}\r\n\r\nexport default function DenseTable() {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n        lastUpdated: new Date(),\r\n        shows: [\r\n            // {\r\n            //     id: \"1\",\r\n            //     venue: \"Fleece\",\r\n            //     artists: [\r\n            //         {\r\n            //             name: \"Chuck P\"\r\n            //         }\r\n\r\n            //     ],\r\n            //     isCancelled: false,\r\n            //     isSoldOut: false,\r\n            //     date: new Date()\r\n            // }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchShowsInfo = async () => {\r\n            console.log(\"fetchShowsInfo\");\r\n\r\n            const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n            const responseJson = await fetch(url);\r\n\r\n            const response: ShowsInfo = await responseJson.json();\r\n\r\n            console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n            setShowsInfo(response);\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchShowsInfo();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        isLoading ? (<Backdrop open={true}>\r\n            <CircularProgress color=\"inherit\" />\r\n        </Backdrop>) : (\r\n                <TableContainer component={Paper} square>\r\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {/* <StyledTableCell>Day</StyledTableCell> */}\r\n                                <StyledTableCell>Date</StyledTableCell>\r\n                                <StyledTableCell>Artists</StyledTableCell>\r\n                                <StyledTableCell>Venue</StyledTableCell>\r\n                                <StyledTableCell>&nbsp;</StyledTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {/* {showsInfo.shows.filter(show => new Date(show.date) >= new Date()).map((show) => ( */}\r\n                            {showsInfo.shows.filter(show => new Date(show.date) >= new Date()).map((show) => (\r\n                                <StyledTableRow key={Math.random()}>\r\n                                    {/* <StyledTableCell >{getDayName(show.date)}</StyledTableCell> */}\r\n                                    <StyledTableCell>{getDateFormatted(show.date)}</StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                        {/* <pre>\r\n                                    {JSON.stringify(show, null, 2)}\r\n                                </pre> */}\r\n                                        {show.artists.map(artist => {\r\n                                            return (\r\n                                                <p key={`${show.id}.${artist.name}`}>\r\n                                                    {artist.name}\r\n\r\n                                                    {/* <span *ngIf=\"artist.stageTime\"\r\n                                          class=\"badge badge-pill badge-primary\"\r\n                                          style=\"margin-right: 10px;\"\r\n                                          title=\"Stage Time\">\r\n                                          {{artist.stageTime}}\r\n                                        </span>\r\n                          \r\n                                        <a *ngIf=\"artist.videoUrl\" [attr.href]=\"artist.videoUrl\">\r\n                                          <span\r\n                                            class=\"badge badge-danger\"\r\n                                            style=\"margin-right: 10px;\">\r\n                                            Video\r\n                                          </span>\r\n                                        </a> */}\r\n                                                </p>\r\n                                            );\r\n                                        })}\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>{show.venue}</StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                        <Grid container direction=\"column\" spacing={1}>\r\n                                            {\r\n                                                show.isSoldOut &&\r\n                                                <Grid item>\r\n\r\n                                                    <Chip\r\n                                                        style={{\r\n                                                            backgroundColor: theme.palette.warning.main,\r\n                                                            color: theme.palette.warning.contrastText\r\n                                                        }} size=\"small\" label=\"Sold Out\" />\r\n                                                </Grid>\r\n\r\n                                            }\r\n                                            {\r\n                                                show.isCancelled &&\r\n                                                <Grid item>\r\n                                                    <Chip\r\n                                                        style={{\r\n                                                            backgroundColor: theme.palette.error.main,\r\n                                                            color: theme.palette.error.contrastText\r\n                                                        }} size=\"small\" label=\"Cancelled\" />\r\n                                                </Grid>\r\n                                            }\r\n                                            {\r\n                                                show.priceText && show.priceText.indexOf('£') === 0 &&\r\n                                                <Grid item>\r\n                                                    <Chip\r\n                                                        style={{\r\n                                                            backgroundColor: theme.palette.info.main,\r\n                                                            color: theme.palette.info.contrastText\r\n                                                        }} size=\"small\" label={show.priceText} />\r\n                                                </Grid>\r\n                                            }\r\n                                            {\r\n                                                show.notes &&\r\n                                                <Grid item>\r\n                                                    <span\r\n                                                        style={{\r\n                                                            // backgroundColor: theme.palette.info.main,\r\n                                                            // color: theme.palette.info.contrastText\r\n                                                        }}>\r\n                                                        {show.notes}\r\n                                                    </span>\r\n                                                </Grid>\r\n                                            }\r\n                                        </Grid>\r\n\r\n                                        {/* \r\n\r\n            <span *ngIf=\"show.priceText && show.priceText.indexOf('£') === 0\"\r\n              class=\"badge badge-info\" style=\"margin-right: 10px;\">\r\n              {{show.priceText}}\r\n            </span>\r\n\r\n            <span *ngIf=\"show.notes\" style=\"margin-right: 10px;\">{{show.notes}}</span> */}\r\n                                    </StyledTableCell>\r\n                                </StyledTableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Paper, Grid, createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\nimport DenseTable from \"./DenseTable\";\r\n\r\nconst GigList: React.FC = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n            primary: blue,\r\n            secondary: blue,\r\n        },\r\n    });\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n                <Grid container direction=\"column\">\r\n                    <Grid item>\r\n                        <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n                    </Grid>\r\n                    <Grid item container justify=\"center\">\r\n                        <DenseTable />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default GigList;","import React, { useState } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { blue } from \"@material-ui/core/colors\";\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport Home from \"./components/Home\";\nimport GigList from \"./components/GigList\";\n\nconst App: React.FC = () => {\n  const [isDarkMode] = useState(true);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarkMode ? \"dark\" : \"light\",\n\n      primary: blue,\n      secondary: blue,\n    },\n  });\n  return (\n    <ThemeProvider theme={theme}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/giglist\" exact component={GigList} />\n          <Route path=\"/\" render={() => <div>404</div>} />\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}