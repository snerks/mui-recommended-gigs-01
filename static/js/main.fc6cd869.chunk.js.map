{"version":3,"sources":["components/Header.tsx","components/Home.tsx","components/DenseTable.tsx","components/GigList.tsx","components/GigDetails.tsx","components/EditGigDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","theme","addedTodayNonZero","backgroundColor","palette","success","main","paddingLeft","paddingRight","borderRadius","Home","useTheme","styles","useState","isLoading","setIsLoading","lastUpdated","Date","shows","showsInfo","setShowsInfo","isRecentlyAdded","show","thresholdInDays","addedDate","currentDate","millisecondsSinceAdded","getTime","millisecondsPerDay","thresholdInMilliseconds","result","useEffect","a","console","log","fetch","responseJson","json","response","fetchShowsInfo","eventsAddedTodayCount","filter","length","haveEventsAddedToday","ThemeProvider","elevation","square","style","height","Grid","container","direction","justify","spacing","item","Backdrop","open","CircularProgress","color","alignItems","Button","variant","component","Link","to","fullWidth","Chip","size","label","date","eventDate","setHours","isFutureEvent","undefined","startIcon","StyledTableCell","withStyles","head","primary","contrastText","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","table","MyTextField","placeholder","props","useField","field","meta","errorText","error","touched","TextField","helperText","autoComplete","DenseTable","showPastEvents","days","dateRelevantShows","setDateRelevantShows","dateRangeShowFilter","addedDateRangeShowFilter","getDateRelevantShows","filteredShows","getRelevantShows","artistFilter","artists","reduce","previousArtistsResult","currentArtist","currentArtistIndex","currentArtistText","name","toLowerCase","indexOf","getArtistFilterShows","initialValues","onSubmit","values","relevantShows","errors","isSubmitting","handleChange","padding","type","TableContainer","Table","aria-label","TableHead","Hidden","smDown","TableBody","map","key","Math","random","toLocaleDateString","weekday","year","month","day","getDateFormatted","xs","artist","id","IconButton","venue","isSoldOut","warning","isCancelled","priceText","info","notes","GigList","useParams","showPastEventsParam","daysParam","createStyles","GigDetails","routeParams","find","getShowById","getDayName","Container","maxWidth","alignContent","Card","CardContent","gutterBottom","stageTime","videoUrl","href","marginTop","CardActions","marginLeft","marginRight","display","MyCheckbox","otherProps","FormControlLabel","control","Checkbox","value","validationSchema","yup","required","of","EditGigDetails","createMuiTheme","blue","secondary","margin","data","setSubmitting","resetForm","handleBlur","handleSubmit","utils","DateFnsUtils","KeyboardDatePicker","autoOk","disableToolbar","format","arrayHelpers","onClick","push","index","nameName","stageTimeName","videoUrlName","remove","paddingTop","disabled","App","basename","process","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fc6cd869.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Recommended Gigs\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  ThemeProvider,\r\n  Button,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Chip,\r\n  useTheme,\r\n  Theme,\r\n} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n  addedTodayNonZero: {\r\n    backgroundColor: theme.palette.success.main,\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n    borderRadius: 5,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Home: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const theme = useTheme();\r\n  const styles = useStyles();\r\n\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  // const theme = createMuiTheme({\r\n  //     palette: {\r\n  //         type: isDarkMode ? \"dark\" : \"light\",\r\n  //         primary: {\r\n  //             main: '#0b5994',\r\n  //         },\r\n  //         secondary: {\r\n  //             main: '#1d83c6',\r\n  //         },\r\n  //     },\r\n  // });\r\n\r\n  const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n    if (!show.addedDate) {\r\n      return false;\r\n    }\r\n\r\n    const addedDate = new Date(show.addedDate);\r\n    const currentDate = new Date();\r\n\r\n    const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n    const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n    const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n    return result;\r\n  };\r\n\r\n  const isFutureEvent = (show: Show) => {\r\n    if (!show.date) {\r\n      return false;\r\n    }\r\n\r\n    const eventDate = new Date(show.date);\r\n    eventDate.setHours(23, 59, 0, 0);\r\n\r\n    let currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    return eventDate >= currentDate;\r\n  };\r\n\r\n  const getAllShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows;\r\n  };\r\n\r\n  const getFutureShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => isFutureEvent(show));\r\n  };\r\n\r\n  const getAddedTodayShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => {\r\n      return isRecentlyAdded(show, 1);\r\n    });\r\n  };\r\n\r\n  const getAddedWithin3DaysShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => {\r\n      return isRecentlyAdded(show, 3);\r\n    });\r\n  };\r\n\r\n  const getAddedWithin7DaysShows = (): Show[] => {\r\n    if (!showsInfo) {\r\n      return [];\r\n    }\r\n\r\n    return showsInfo.shows.filter((show) => {\r\n      return isRecentlyAdded(show, 7);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      console.log(\"fetchShowsInfo\");\r\n\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const eventsAddedTodayCount = getAddedTodayShows().length;\r\n  const haveEventsAddedToday = eventsAddedTodayCount > 0;\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100vh\" }}>\r\n        <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          {isLoading ? (\r\n            <Backdrop open={true}>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          ) : (\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              spacing={2}\r\n              justify=\"center\"\r\n              alignItems=\"stretch\"\r\n            >\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false\"}\r\n                  fullWidth\r\n                >\r\n                  <span>Future Events</span>&nbsp;{\" \"}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    label={getFutureShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false/1\"}\r\n                  fullWidth\r\n                >\r\n                  <div\r\n                    className={\r\n                      haveEventsAddedToday\r\n                        ? styles.addedTodayNonZero\r\n                        : undefined\r\n                    }\r\n                  >\r\n                    Added Today&nbsp;\r\n                    <Chip\r\n                      variant=\"default\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      label={eventsAddedTodayCount}\r\n                    />\r\n                  </div>\r\n                  {/* {isLoading ? null : <span>&nbsp;({getAddedTodayShows().length})</span>} */}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false/3\"}\r\n                  fullWidth\r\n                >\r\n                  <span>Added In Last 3 Days</span>&nbsp;\r\n                  {/* {isLoading ? null : <span>&nbsp;({getAddedWithin3DaysShows().length})</span>} */}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    label={getAddedWithin3DaysShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/false/7\"}\r\n                  fullWidth\r\n                >\r\n                  <span>Added In Last 7 Days</span>&nbsp;\r\n                  {/* {isLoading ? null : <span>&nbsp;({getAddedWithin7DaysShows().length})</span>} */}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    label={getAddedWithin7DaysShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/giglist/true/-1\"}\r\n                  fullWidth\r\n                >\r\n                  <span>All Events</span>&nbsp;{\" \"}\r\n                  <Chip\r\n                    variant=\"default\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    label={getAllShows().length}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  component={Link}\r\n                  to={\"/editgigdetails/\"}\r\n                  fullWidth\r\n                  startIcon={<PlaylistAddIcon />}\r\n                >\r\n                  <span>Add</span>&nbsp;\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport DetailsIcon from \"@material-ui/icons/Details\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport {\r\n  CircularProgress,\r\n  Backdrop,\r\n  Chip,\r\n  Grid,\r\n  Hidden,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form, useField, FieldAttributes } from \"formik\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    // backgroundColor: theme.palette.common.black,\r\n    // color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // minWidth: 650,\r\n    // maxWidth: 500\r\n  },\r\n});\r\n\r\nconst getDayName = (date: Date) => {\r\n  return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n};\r\n\r\nconst getDateFormatted = (date: Date) => {\r\n  const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n  return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n};\r\n\r\ninterface Props {\r\n  showPastEvents: boolean;\r\n\r\n  days?: number;\r\n}\r\n\r\ninterface FormValues {\r\n  artistFilter: string;\r\n}\r\n\r\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\r\n  placeholder,\r\n  ...props\r\n}) => {\r\n  const [field, meta] = useField<{}>(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  return (\r\n    <TextField\r\n      placeholder={placeholder}\r\n      {...field}\r\n      helperText={errorText}\r\n      autoComplete=\"off\"\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst DenseTable: React.FC<Props> = (props) => {\r\n  // console.log(\"DenseTable : Start Render\");\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showPastEvents] = useState(props.showPastEvents);\r\n  const [days] = useState(props.days);\r\n  // const [artistFilter, setArtistFilter] = useState(\"\");\r\n  const [dateRelevantShows, setDateRelevantShows] = useState<Show[]>([]);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [\r\n      // {\r\n      //     id: \"1\",\r\n      //     venue: \"Fleece\",\r\n      //     artists: [\r\n      //         {\r\n      //             name: \"Chuck P\"\r\n      //         }\r\n      //     ],\r\n      //     isCancelled: false,\r\n      //     isSoldOut: false,\r\n      //     date: new Date()\r\n      // }\r\n    ],\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //     // setDateRelevantShows(getRelevantShows(showsInfo.shows));\r\n  //     console.log(\"useEffect:artistFilter\");\r\n  // }, [artistFilter]);\r\n\r\n  const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n    if (!show.addedDate) {\r\n      return false;\r\n    }\r\n\r\n    const addedDate = new Date(show.addedDate);\r\n    const currentDate = new Date();\r\n\r\n    const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n    const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n    const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n    return result;\r\n  };\r\n\r\n  // const getInDateRangeShows = (): Show[] => {\r\n  //     if (!showsInfo) {\r\n  //         return [];\r\n  //     }\r\n\r\n  //     const { shows } = showsInfo;\r\n\r\n  //     if (showPastEvents) {\r\n  //         return shows;\r\n  //     }\r\n\r\n  //     const results = shows.filter(dateRangeShowFilter);\r\n\r\n  //     return results;\r\n  // }\r\n\r\n  const isFutureEvent = (show: Show) => {\r\n    if (!show.date) {\r\n      return false;\r\n    }\r\n\r\n    const eventDate = new Date(show.date);\r\n    eventDate.setHours(23, 59, 0, 0);\r\n\r\n    let currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    return eventDate >= currentDate;\r\n  };\r\n\r\n  const dateRangeShowFilter = (show: Show) => {\r\n    let willShowEvent = false;\r\n\r\n    if (showPastEvents) {\r\n      willShowEvent = true;\r\n    } else {\r\n      willShowEvent = isFutureEvent(show);\r\n    }\r\n\r\n    return willShowEvent;\r\n  };\r\n\r\n  const addedDateRangeShowFilter = (show: Show) => {\r\n    let willShowEvent = false;\r\n\r\n    if (days === -1) {\r\n      willShowEvent = true;\r\n    } else {\r\n      willShowEvent = isRecentlyAdded(show, days);\r\n    }\r\n\r\n    return willShowEvent;\r\n  };\r\n\r\n  // const getInAddedDateRangeShows = (shows: Show[]): Show[] => {\r\n  //     if (!shows) {\r\n  //         return [];\r\n  //     }\r\n\r\n  //     // const { shows } = showsInfo;\r\n\r\n  //     if (days === -1) {\r\n  //         return shows;\r\n  //     }\r\n\r\n  //     const inEventDateRangeShows = shows.filter(dateRangeShowFilter);\r\n\r\n  //     const results = inEventDateRangeShows.filter(show => addedDateRangeShowFilter(show));\r\n\r\n  //     return results;\r\n  // }\r\n\r\n  const getArtistFilterShows = (artistFilter: string): Show[] => {\r\n    //     const results = this.inDateRangeShows.filter(show => {\r\n    console.log(\"getArtistFilterShows\");\r\n\r\n    if (!artistFilter) {\r\n      return dateRelevantShows;\r\n    }\r\n\r\n    const results = dateRelevantShows.filter((show) => {\r\n      if (!artistFilter) {\r\n        return true;\r\n      }\r\n\r\n      // if (artistFilter.length < 2) {\r\n      //     return true;\r\n      // }\r\n\r\n      const showArtistsText = show.artists.reduce(\r\n        (previousArtistsResult, currentArtist, currentArtistIndex) => {\r\n          const currentArtistText = currentArtist.name;\r\n\r\n          return currentArtistIndex === 0\r\n            ? currentArtistText\r\n            : previousArtistsResult + \" \" + currentArtistText;\r\n        },\r\n        \"\"\r\n      );\r\n\r\n      return (\r\n        showArtistsText.toLowerCase().indexOf(artistFilter.toLowerCase()) > -1\r\n      );\r\n    });\r\n\r\n    return results;\r\n  };\r\n\r\n  const getDateRelevantShows = (shows: Show[]): Show[] => {\r\n    let filteredShows = shows;\r\n\r\n    filteredShows = filteredShows.filter(dateRangeShowFilter);\r\n\r\n    if (days !== -1) {\r\n      filteredShows = filteredShows.filter(addedDateRangeShowFilter);\r\n    }\r\n\r\n    return filteredShows;\r\n  };\r\n\r\n  //   const getRelevantShows = (shows: Show[]): Show[] => {\r\n  //     // if (!shows) {\r\n  //     //     return [];\r\n  //     // }\r\n\r\n  //     // const { shows } = showsInfo;\r\n\r\n  //     let filteredShows = shows;\r\n\r\n  //     filteredShows = filteredShows.filter(dateRangeShowFilter);\r\n\r\n  //     if (days !== -1) {\r\n  //       filteredShows = filteredShows.filter(addedDateRangeShowFilter);\r\n  //     }\r\n\r\n  //     if (artistFilter) {\r\n  //       filteredShows = getArtistFilterShows(filteredShows);\r\n  //     }\r\n  //     return filteredShows;\r\n  //   };\r\n\r\n  const getRelevantShows = (artistFilter: string): Show[] => {\r\n    let filteredShows = dateRelevantShows;\r\n\r\n    if (artistFilter) {\r\n      filteredShows = getArtistFilterShows(artistFilter);\r\n    }\r\n\r\n    return filteredShows;\r\n  };\r\n\r\n  //   const handleArtistFilterChange = (e: React.ChangeEvent<any>): void => {\r\n  //     console.log(e.target.value);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setDateRelevantShows(getDateRelevantShows(response.shows));\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    <Grid container direction=\"column\">\r\n      <Grid item>\r\n        <Formik initialValues={{ artistFilter: \"\" }} onSubmit={() => {}}>\r\n          {({ values, errors, isSubmitting, handleChange }) => {\r\n            // console.table(values);\r\n\r\n            // if (values.artistFilter && values.artistFilter.length > 1) {\r\n            //     setTimeout(function () {\r\n            //         setArtistFilter(values.artistFilter);\r\n            //     }, 30);\r\n            // }\r\n\r\n            const relevantShows = getRelevantShows(values.artistFilter);\r\n\r\n            return (\r\n              <Grid container direction=\"column\">\r\n                <Grid item container>\r\n                  <Grid item>\r\n                    <Form style={{ padding: \"0 30px 15px 15px\" }}>\r\n                      <MyTextField\r\n                        placeholder=\"artist filter\"\r\n                        name=\"artistFilter\"\r\n                        type=\"input\"\r\n                      />\r\n                    </Form>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Chip\r\n                      variant=\"default\"\r\n                      color=\"secondary\"\r\n                      size=\"small\"\r\n                      label={relevantShows.length}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TableContainer component={Paper} square>\r\n                    <Table\r\n                      className={classes.table}\r\n                      size=\"small\"\r\n                      aria-label=\"a dense table\"\r\n                    >\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <Hidden smDown>\r\n                            <StyledTableCell>Day</StyledTableCell>\r\n                          </Hidden>\r\n                          <StyledTableCell>Date</StyledTableCell>\r\n                          <StyledTableCell>Artists</StyledTableCell>\r\n                          <StyledTableCell>Venue</StyledTableCell>\r\n                          <StyledTableCell>Actions</StyledTableCell>\r\n                          <StyledTableCell>&nbsp;</StyledTableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {/* {showsInfo.shows.filter(show => new Date(show.date) >= new Date()).map((show) => ( */}\r\n                        {relevantShows.map((show) => (\r\n                          <StyledTableRow key={Math.random()}>\r\n                            <Hidden smDown>\r\n                              <StyledTableCell>\r\n                                {getDayName(show.date)}\r\n                              </StyledTableCell>\r\n                            </Hidden>\r\n                            <StyledTableCell>\r\n                              {getDateFormatted(show.date)}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell>\r\n                              {/* <pre>\r\n                                          {JSON.stringify(show, null, 2)}\r\n                                      </pre> */}\r\n                              <Grid container>\r\n                                <Grid item xs={11}>\r\n                                  {show.artists.map((artist) => {\r\n                                    return (\r\n                                      <p key={`${show.id}.${artist.name}`}>\r\n                                        {artist.name}\r\n\r\n                                        {/* <span *ngIf=\"artist.stageTime\"\r\n                                                class=\"badge badge-pill badge-primary\"\r\n                                                style=\"margin-right: 10px;\"\r\n                                                title=\"Stage Time\">\r\n                                                {{artist.stageTime}}\r\n                                              </span>\r\n                                \r\n                                              <a *ngIf=\"artist.videoUrl\" [attr.href]=\"artist.videoUrl\">\r\n                                                <span\r\n                                                  class=\"badge badge-danger\"\r\n                                                  style=\"margin-right: 10px;\">\r\n                                                  Video\r\n                                                </span>\r\n                                              </a> */}\r\n                                      </p>\r\n                                    );\r\n                                  })}\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                  <IconButton\r\n                                    aria-label=\"details\"\r\n                                    component={Link}\r\n                                    to={`/gigdetails/${show.id}`}\r\n                                  >\r\n                                    <DetailsIcon />\r\n                                  </IconButton>\r\n                                </Grid>\r\n                              </Grid>\r\n                            </StyledTableCell>\r\n                            <StyledTableCell>{show.venue}</StyledTableCell>\r\n                            <StyledTableCell>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                component={Link}\r\n                                to={`/editgigdetails/${show.id}`}\r\n                              >\r\n                                <span>Edit</span>\r\n                              </Button>\r\n                            </StyledTableCell>\r\n                            <StyledTableCell>\r\n                              <Grid container direction=\"column\" spacing={1}>\r\n                                {show.isSoldOut && (\r\n                                  <Grid item>\r\n                                    <Chip\r\n                                      style={{\r\n                                        backgroundColor:\r\n                                          theme.palette.warning.main,\r\n                                        color:\r\n                                          theme.palette.warning.contrastText,\r\n                                      }}\r\n                                      size=\"small\"\r\n                                      label=\"Sold Out\"\r\n                                    />\r\n                                  </Grid>\r\n                                )}\r\n                                {show.isCancelled && (\r\n                                  <Grid item>\r\n                                    <Chip\r\n                                      style={{\r\n                                        backgroundColor:\r\n                                          theme.palette.error.main,\r\n                                        color: theme.palette.error.contrastText,\r\n                                      }}\r\n                                      size=\"small\"\r\n                                      label=\"Cancelled\"\r\n                                    />\r\n                                  </Grid>\r\n                                )}\r\n                                {show.priceText &&\r\n                                  show.priceText.indexOf(\"£\") === 0 && (\r\n                                    <Grid item>\r\n                                      <Chip\r\n                                        style={{\r\n                                          backgroundColor:\r\n                                            theme.palette.info.main,\r\n                                          color:\r\n                                            theme.palette.info.contrastText,\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        label={show.priceText}\r\n                                      />\r\n                                    </Grid>\r\n                                  )}\r\n                                {show.notes && (\r\n                                  <Grid item>\r\n                                    <span\r\n                                      style={\r\n                                        {\r\n                                          // backgroundColor: theme.palette.info.main,\r\n                                          // color: theme.palette.info.contrastText\r\n                                        }\r\n                                      }\r\n                                    >\r\n                                      {show.notes}\r\n                                    </span>\r\n                                  </Grid>\r\n                                )}\r\n                              </Grid>\r\n\r\n                              {/* \r\n      \r\n                  <span *ngIf=\"show.priceText && show.priceText.indexOf('£') === 0\"\r\n                    class=\"badge badge-info\" style=\"margin-right: 10px;\">\r\n                    {{show.priceText}}\r\n                  </span>\r\n      \r\n                  <span *ngIf=\"show.notes\" style=\"margin-right: 10px;\">{{show.notes}}</span> */}\r\n                            </StyledTableCell>\r\n                          </StyledTableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DenseTable;\r\n","import React from \"react\";\r\nimport { Paper, Grid, ThemeProvider, useTheme } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport DenseTable from \"./DenseTable\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n\r\n  // match?: any;\r\n}\r\n\r\n// interface RouterProps {\r\n//     match: any;\r\n// }\r\n\r\n// type PropsWithRouterParams = Props & RouterProps;\r\n\r\nconst GigList: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  // const theme = createMuiTheme({\r\n  //     palette: {\r\n  //         type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n  //         primary: {\r\n  //             main: '#0b5994',\r\n  //         },\r\n  //         secondary: {\r\n  //             main: '#1d83c6',\r\n  //         },\r\n  //     },\r\n  // });\r\n\r\n  const { showPastEvents, days } = useParams();\r\n  const showPastEventsParam = showPastEvents === \"true\";\r\n  const daysParam = days === undefined ? -1 : +days;\r\n\r\n  // console.log(showPastEvents, showPastEventsParam);\r\n  // const propsAsAny = props as any;\r\n  // const { isDarkMode, setIsDarkMode } = propsAsAny;\r\n  // const match = propsAsAny.match;\r\n  // const showPastEvents = match && match.params && match.params.showPastEvents;\r\n\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n        <Grid container direction=\"column\" spacing={1}>\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          <Grid item container justify=\"center\">\r\n            <DenseTable showPastEvents={showPastEventsParam} days={daysParam} />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default GigList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useTheme,\r\n  Grid,\r\n  Chip,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ShowsInfo } from \"../models/models\";\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n\r\n  return createStyles({\r\n    root: {\r\n      backgroundColor: theme.palette.background.default\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n  });\r\n});\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst GigDetails: React.FC = () => {\r\n  const routeParams = useParams<RouteParams>();\r\n\r\n  const classes = useStyles();\r\n  // const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  const theme = useTheme();\r\n  // const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [id] = useState(routeParams.id);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls\r\n      // https://firebase.google.com/docs/reference/rest/database/\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const getShowById = (id: string) => {\r\n    const idMatch = showsInfo.shows.find((show) => show.id && show.id === id);\r\n\r\n    return idMatch;\r\n  };\r\n\r\n  const show = getShowById(id);\r\n\r\n  const getDayName = (date: Date) => {\r\n    return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n  };\r\n\r\n  const getDateFormatted = (date: Date) => {\r\n    const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n    return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n      <Container maxWidth={false}>\r\n        <Typography component=\"div\" className={classes.root} style={{ height: '100vh' }}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"stretch\"\r\n            alignContent=\"stretch\"\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Grid item xs={12}>\r\n              {!show && <h1>Event not found</h1>}\r\n\r\n              {show && (\r\n                <Card className={classes.root} variant=\"outlined\" square>\r\n                  <CardContent>\r\n                    <Typography\r\n                      className={classes.title}\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                    >\r\n                      {getDayName(show.date)}, {getDateFormatted(show.date)}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                      {show.artists[0].name}\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">\r\n                      {show.venue}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"div\">\r\n                      <Typography color=\"textSecondary\">\r\n                        Artists\r\n                  </Typography>\r\n                      <Grid container direction=\"column\" spacing={1}>\r\n                        {show.artists.map((artist) => {\r\n                          return (\r\n                            <Grid item container key={`${show.id}.${artist.name}`}>\r\n                              <Grid item xs={4}>\r\n                                {artist.name}\r\n                              </Grid>\r\n\r\n                              <Grid item xs={4}>\r\n                                {artist.stageTime && (\r\n                                  <Chip\r\n                                    style={{\r\n                                      backgroundColor: theme.palette.info.main,\r\n                                      color: theme.palette.info.contrastText,\r\n                                    }}\r\n                                    size=\"small\"\r\n                                    label={artist.stageTime}\r\n                                  />\r\n                                )}\r\n                              </Grid>\r\n\r\n                              <Grid item xs={4}>\r\n                                {artist.videoUrl && (\r\n                                  <a href={artist.videoUrl}>\r\n                                    <Chip\r\n                                      style={{\r\n                                        backgroundColor: theme.palette.info.main,\r\n                                        color: theme.palette.info.contrastText,\r\n                                      }}\r\n                                      size=\"small\"\r\n                                      label=\"Video\"\r\n                                    />\r\n                                  </a>\r\n                                )}\r\n                              </Grid>\r\n                            </Grid>\r\n                          );\r\n                        })}\r\n                      </Grid>\r\n                      <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        spacing={1}\r\n                        style={{ marginTop: 10 }}\r\n                      >\r\n                        {show.isSoldOut && (\r\n                          <Grid item>\r\n                            <Chip\r\n                              style={{\r\n                                backgroundColor: theme.palette.warning.main,\r\n                                color: theme.palette.warning.contrastText,\r\n                              }}\r\n                              size=\"small\"\r\n                              label=\"Sold Out\"\r\n                            />\r\n                          </Grid>\r\n                        )}\r\n                        {show.isCancelled && (\r\n                          <Grid item>\r\n                            <Chip\r\n                              style={{\r\n                                backgroundColor: theme.palette.error.main,\r\n                                color: theme.palette.error.contrastText,\r\n                              }}\r\n                              size=\"small\"\r\n                              label=\"Cancelled\"\r\n                            />\r\n                          </Grid>\r\n                        )}\r\n                        {show.priceText && show.priceText.indexOf(\"£\") === 0 && (\r\n                          <Grid item>\r\n                            <Chip\r\n                              style={{\r\n                                backgroundColor: theme.palette.info.main,\r\n                                color: theme.palette.info.contrastText,\r\n                              }}\r\n                              size=\"small\"\r\n                              label={show.priceText}\r\n                            />\r\n                          </Grid>\r\n                        )}\r\n                        {show.notes && (\r\n                          <Grid item>\r\n                            <span\r\n                              style={\r\n                                {\r\n                                  // backgroundColor: theme.palette.info.main,\r\n                                  // color: theme.palette.info.contrastText\r\n                                }\r\n                              }\r\n                            >\r\n                              {show.notes}\r\n                            </span>\r\n                          </Grid>\r\n                        )}\r\n                      </Grid>\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    {/* <Button size=\"small\">Learn More</Button> */}\r\n                    <Typography variant=\"body2\" component=\"div\">\r\n                      <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        style={{ marginLeft: 10, marginRight: 10 }}\r\n                      >\r\n                        {show.addedDate && (\r\n                          <Grid item>\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              display=\"block\"\r\n                              gutterBottom\r\n                            >\r\n                              Added: {getDayName(show.addedDate)},{\" \"}\r\n                              {getDateFormatted(show.addedDate)}\r\n                            </Typography>\r\n                          </Grid>\r\n                        )}\r\n                        {show.id && (\r\n                          <Grid item>\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              display=\"block\"\r\n                              gutterBottom\r\n                            >\r\n                              Id: {show.id}\r\n                            </Typography>\r\n                          </Grid>\r\n                        )}\r\n                      </Grid>\r\n                    </Typography>\r\n                  </CardActions>\r\n                </Card>\r\n              )}\r\n\r\n              {/* <pre>{JSON.stringify(getShowById(id), null, 2)}</pre> */}\r\n            </Grid>\r\n          </Grid>\r\n        </Typography>\r\n      </Container>\r\n    );\r\n};\r\n\r\nexport default GigDetails;\r\n","import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  Formik,\r\n  Field,\r\n  Form,\r\n  useField,\r\n  useFormik,\r\n  FieldAttributes,\r\n  FieldArray,\r\n} from \"formik\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  FormControlLabel,\r\n  Select,\r\n  MenuItem,\r\n  Backdrop,\r\n  CircularProgress,\r\n  IconButton,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  //   KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport {\r\n  TimePicker,\r\n  DatePicker,\r\n  DateTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"formik-material-ui-pickers\";\r\n\r\nimport { Paper, Grid, ThemeProvider, createMuiTheme } from \"@material-ui/core\";\r\n// import Header from \"./components/Header\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { blue } from \"@material-ui/core/colors\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport Header from \"./Header\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\n\r\ntype MyRadioProps = { label: string } & FieldAttributes<{}>;\r\n\r\n// Does not work in pre-Chromium MS Edge\r\n// const MyRadio: React.FC<MyRadioProps> = ({ label, ...props }) => {\r\n//   const [field] = useField<{}>(props);\r\n\r\n//   return <FormControlLabel {...field} control={<Radio />} label={label} />;\r\n// };\r\n\r\nconst MyRadio: React.FC<MyRadioProps> = (props) => {\r\n  const { label, ...otherProps } = props;\r\n  const [field] = useField<{}>(otherProps);\r\n\r\n  return <FormControlLabel {...field} control={<Radio />} label={label} />;\r\n};\r\n\r\nconst MyCheckbox: React.FC<MyRadioProps> = (props) => {\r\n  const { label, ...otherProps } = props;\r\n  const [field] = useField<{}>(otherProps);\r\n\r\n  return <FormControlLabel {...field} control={<Checkbox />} label={label} />;\r\n};\r\n\r\ntype MyTextFieldProps = {\r\n  label?: string;\r\n  placeholder: string;\r\n} & FieldAttributes<{}>;\r\n\r\nconst MyTextField: React.FC<MyTextFieldProps> = ({\r\n  label,\r\n  placeholder,\r\n  ...props\r\n}) => {\r\n  const [field, meta] = useField<{}>(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  return (\r\n    <TextField\r\n      placeholder={placeholder}\r\n      {...field}\r\n      value={field.value || \"\"}\r\n      helperText={errorText}\r\n      autoComplete=\"off\"\r\n      error={!!errorText}\r\n      fullWidth\r\n      label={!!label ? label : null}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  venue: yup.string().required(),\r\n  date: yup.date().required(),\r\n  artists: yup.array().of(\r\n    yup.object({\r\n      name: yup.string().required(),\r\n    })\r\n  ),\r\n});\r\n\r\ninterface RouteParams {\r\n  id?: string;\r\n}\r\n\r\nconst EditGigDetails: React.FC = () => {\r\n  const routeParams = useParams<RouteParams>();\r\n\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [id] = useState(routeParams.id);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  const haveId = !!id;\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n      primary: blue,\r\n      secondary: blue,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls\r\n      // https://firebase.google.com/docs/reference/rest/database/\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const getShowById = (id: string) => {\r\n    const idMatch = showsInfo.shows.find((show) => show.id && show.id === id);\r\n\r\n    return idMatch;\r\n  };\r\n\r\n  const show = !!id ? getShowById(id) : null;\r\n\r\n  const initialValues: Show = show\r\n    ? show\r\n    : {\r\n        addedDate: new Date(),\r\n        venue: \"\",\r\n        date: new Date(),\r\n        notes: \"\",\r\n        priceText: \"\",\r\n        isSoldOut: false,\r\n        isCancelled: false,\r\n        artists: [\r\n          { name: \"\", stageTime: \"\", videoUrl: \"\", id: \"\" + Math.random() },\r\n        ],\r\n      };\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n    <Container maxWidth={false}>\r\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          <Grid item container alignContent=\"stretch\">\r\n            <Grid item xs={12}>\r\n              <div style={{ margin: 30 }}>\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={(data, { setSubmitting, resetForm }) => {\r\n                    setSubmitting(true);\r\n\r\n                    // Make async call\r\n                    console.log(\"submit\", data);\r\n\r\n                    setSubmitting(false);\r\n                  }}\r\n                >\r\n                  {({\r\n                    values,\r\n                    errors,\r\n                    isSubmitting,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                  }) => (\r\n                    <Grid container>\r\n                      <Grid item xs={12}>\r\n                        <Form>\r\n                          <Grid container spacing={2} direction=\"column\">\r\n                            <Grid item>\r\n                              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Field\r\n                                  component={KeyboardDatePicker}\r\n                                  autoOk\r\n                                  name=\"date\"\r\n                                  label=\"Event Date\"\r\n                                  disableToolbar\r\n                                  variant=\"inline\"\r\n                                  format=\"dd MMMM yyyy\"\r\n                                  fullWidth\r\n                                />\r\n                              </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <MyTextField\r\n                                placeholder=\"venue\"\r\n                                name=\"venue\"\r\n                                type=\"input\"\r\n                                label=\"Venue\"\r\n                              />\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <MyTextField\r\n                                placeholder=\"notes\"\r\n                                name=\"notes\"\r\n                                type=\"input\"\r\n                                label=\"Notes\"\r\n                              />\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <MyTextField\r\n                                placeholder=\"price\"\r\n                                name=\"priceText\"\r\n                                type=\"input\"\r\n                                label=\"Price\"\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <MyCheckbox\r\n                            name=\"isSoldOut\"\r\n                            type=\"checkbox\"\r\n                            label=\"Is Sold Out?\"\r\n                          />\r\n\r\n                          <MyCheckbox\r\n                            name=\"isCancelled\"\r\n                            type=\"checkbox\"\r\n                            label=\"Is Cancelled?\"\r\n                          />\r\n\r\n                          <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            style={{ marginTop: 10 }}\r\n                          >\r\n                            <Grid item>Artists</Grid>\r\n                            <Grid item container>\r\n                              <Grid item xs={12}>\r\n                                <FieldArray name=\"artists\">\r\n                                  {(arrayHelpers) => (\r\n                                    <div>\r\n                                      <Grid container direction=\"column\">\r\n                                        <Grid item container justify=\"flex-end\">\r\n                                          <IconButton\r\n                                            aria-label=\"add\"\r\n                                            onClick={() =>\r\n                                              arrayHelpers.push({\r\n                                                name: \"\",\r\n                                                stageTime: \"\",\r\n                                                videoUrl: \"\",\r\n                                                id: \"\" + Math.random(),\r\n                                              })\r\n                                            }\r\n                                          >\r\n                                            <PersonAddIcon />\r\n                                          </IconButton>\r\n                                        </Grid>\r\n                                        <Grid\r\n                                          item\r\n                                          container\r\n                                          direction=\"column\"\r\n                                          justify=\"space-between\"\r\n                                          xs={12}\r\n                                        >\r\n                                          {values.artists.map(\r\n                                            (artist, index) => {\r\n                                              const nameName = `artists.${index}.name`;\r\n                                              const stageTimeName = `artists.${index}.stageTime`;\r\n                                              const videoUrlName = `artists.${index}.videoUrl`;\r\n\r\n                                              return (\r\n                                                <Grid\r\n                                                  item\r\n                                                  container\r\n                                                  key={\r\n                                                    artist.id || Math.random()\r\n                                                  }\r\n                                                  justify=\"space-evenly\"\r\n                                                  alignContent=\"stretch\"\r\n                                                >\r\n                                                  <Grid item>\r\n                                                    <MyTextField\r\n                                                      placeholder=\"artist name\"\r\n                                                      name={nameName}\r\n                                                    />\r\n                                                  </Grid>\r\n\r\n                                                  <Grid item>\r\n                                                    <MyTextField\r\n                                                      placeholder=\"stage time\"\r\n                                                      name={stageTimeName}\r\n                                                    />\r\n                                                  </Grid>\r\n\r\n                                                  <Grid item>\r\n                                                    <MyTextField\r\n                                                      placeholder=\"video url\"\r\n                                                      name={videoUrlName}\r\n                                                    />\r\n                                                  </Grid>\r\n\r\n                                                  <Grid item>\r\n                                                    <IconButton\r\n                                                      size=\"small\"\r\n                                                      aria-label=\"delete\"\r\n                                                      onClick={() =>\r\n                                                        arrayHelpers.remove(\r\n                                                          index\r\n                                                        )\r\n                                                      }\r\n                                                    >\r\n                                                      <DeleteIcon />\r\n                                                    </IconButton>\r\n                                                  </Grid>\r\n                                                </Grid>\r\n                                              );\r\n                                            }\r\n                                          )}\r\n                                        </Grid>\r\n                                      </Grid>\r\n                                    </div>\r\n                                  )}\r\n                                </FieldArray>\r\n                              </Grid>\r\n                            </Grid>\r\n                            {/* <Grid item container >\r\n                              <div style={{ paddingTop: 30 }}>\r\n                                <Button\r\n                                  disabled={isSubmitting}\r\n                                  type=\"submit\"\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                >\r\n                                  submit\r\n                                </Button>\r\n                              </div>\r\n                            </Grid> */}\r\n                            <Grid\r\n                              item\r\n                              container\r\n                              justify=\"flex-end\"\r\n                              style={{ paddingTop: 30 }}\r\n                            >\r\n                              <Button\r\n                                disabled={isSubmitting}\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                              >\r\n                                save\r\n                              </Button>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Form>\r\n                      </Grid>\r\n                      {/* <Grid item xs={12} container direction=\"row\">\r\n                        <Grid item>\r\n                          <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                        </Grid>\r\n                        <Grid item>\r\n                          <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n                        </Grid>\r\n                      </Grid> */}\r\n                    </Grid>\r\n                  )}\r\n                </Formik>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EditGigDetails;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n// import { blue, green, amber, blueGrey, red, cyan, indigo, lightBlue, grey, teal } from \"@material-ui/core/colors\";\r\n\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Home from \"./components/Home\";\r\nimport GigList from \"./components/GigList\";\r\nimport GigDetails from \"./components/GigDetails\";\r\nimport EditGigDetails from \"./components/EditGigDetails\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: \"#0b5994\",\r\n      },\r\n      secondary: {\r\n        main: \"#1d83c6\",\r\n      },\r\n    },\r\n  });\r\n\r\n  // const theme = createMuiTheme({\r\n  //   palette: {\r\n  //     type: isDarkMode ? \"dark\" : \"light\",\r\n  //     primary: blue,\r\n  //     secondary: blue,\r\n  //   },\r\n  // });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          {/* <Route path=\"/\" exact component={Home} /> */}\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route\r\n            path=\"/giglist/:showPastEvents/:days?\"\r\n            render={() => (\r\n              <GigList isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route path=\"/gigdetails/:id\" render={() => <GigDetails />} />\r\n          <Route\r\n            path=\"/editgigdetails/:id?\"\r\n            render={() => <EditGigDetails />}\r\n          />\r\n\r\n          {/* <Route path=\"/\" render={() => <div>404</div>} /> */}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  //   <App />\r\n  // </React.StrictMode>,\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}