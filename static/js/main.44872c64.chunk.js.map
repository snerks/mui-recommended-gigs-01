{"version":3,"sources":["components/Header.tsx","components/Home.tsx","components/DenseTable.tsx","components/GigList.tsx","components/GigDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","theme","addedTodayNonZero","backgroundColor","palette","success","main","paddingLeft","paddingRight","borderRadius","Home","useTheme","styles","useState","isLoading","setIsLoading","lastUpdated","Date","shows","showsInfo","setShowsInfo","isRecentlyAdded","show","thresholdInDays","addedDate","currentDate","millisecondsSinceAdded","getTime","millisecondsPerDay","thresholdInMilliseconds","result","useEffect","a","console","log","fetch","responseJson","json","response","fetchShowsInfo","eventsAddedTodayCount","filter","length","haveEventsAddedToday","ThemeProvider","elevation","square","style","height","Grid","container","direction","justify","spacing","item","Backdrop","open","CircularProgress","color","alignItems","Button","variant","component","Link","to","fullWidth","Chip","size","label","date","eventDate","setHours","isFutureEvent","undefined","StyledTableCell","withStyles","head","primary","contrastText","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","table","MyTextField","placeholder","props","useField","field","meta","errorText","error","touched","TextField","helperText","autoComplete","DenseTable","showPastEvents","days","dateRelevantShows","setDateRelevantShows","dateRangeShowFilter","addedDateRangeShowFilter","getDateRelevantShows","filteredShows","getRelevantShows","artistFilter","artists","reduce","previousArtistsResult","currentArtist","currentArtistIndex","currentArtistText","name","toLowerCase","indexOf","getArtistFilterShows","initialValues","onSubmit","values","relevantShows","errors","isSubmitting","handleChange","padding","type","TableContainer","Table","aria-label","TableHead","Hidden","smDown","TableBody","map","key","Math","random","toLocaleDateString","weekday","year","month","day","getDateFormatted","xs","artist","id","IconButton","venue","isSoldOut","warning","isCancelled","priceText","info","notes","GigList","useParams","showPastEventsParam","daysParam","pos","GigDetails","routeParams","find","getShowById","getDayName","alignContent","Card","CardContent","gutterBottom","stageTime","videoUrl","href","marginTop","CardActions","marginLeft","marginRight","display","App","createMuiTheme","secondary","basename","process","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.44872c64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Recommended Gigs\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Paper, Grid, ThemeProvider, Button, Backdrop, CircularProgress, Chip, useTheme, Theme } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    addedTodayNonZero: {\r\n        backgroundColor: theme.palette.success.main,\r\n        paddingLeft: 50,\r\n        paddingRight: 50,\r\n        borderRadius: 5\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    isDarkMode: boolean;\r\n    setIsDarkMode: Function;\r\n}\r\n\r\nconst Home: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n    const theme = useTheme();\r\n    const styles = useStyles();\r\n\r\n    // const [isDarkMode, setIsDarkMode] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n        lastUpdated: new Date(),\r\n        shows: []\r\n    });\r\n\r\n    // const theme = createMuiTheme({\r\n    //     palette: {\r\n    //         type: isDarkMode ? \"dark\" : \"light\",\r\n    //         primary: {\r\n    //             main: '#0b5994',\r\n    //         },\r\n    //         secondary: {\r\n    //             main: '#1d83c6',\r\n    //         },\r\n    //     },\r\n    // });\r\n\r\n    const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n        if (!show.addedDate) {\r\n            return false;\r\n        }\r\n\r\n        const addedDate = new Date(show.addedDate);\r\n        const currentDate = new Date();\r\n\r\n        const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n        const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n        const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n        const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n        return result;\r\n    };\r\n\r\n    const isFutureEvent = (show: Show) => {\r\n        if (!show.date) {\r\n            return false;\r\n        }\r\n\r\n        const eventDate = new Date(show.date);\r\n        eventDate.setHours(23, 59, 0, 0);\r\n\r\n        let currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0);\r\n\r\n        return eventDate >= currentDate;\r\n    };\r\n\r\n    const getAllShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows;\r\n    }\r\n\r\n    const getFutureShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => isFutureEvent(show));\r\n    }\r\n\r\n    const getAddedTodayShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 1);\r\n        });\r\n    }\r\n\r\n    const getAddedWithin3DaysShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 3);\r\n        });\r\n    }\r\n\r\n    const getAddedWithin7DaysShows = (): Show[] => {\r\n        if (!showsInfo) {\r\n            return [];\r\n        }\r\n\r\n        return showsInfo.shows.filter(show => {\r\n            return isRecentlyAdded(show, 7);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchShowsInfo = async () => {\r\n            console.log(\"fetchShowsInfo\");\r\n\r\n            const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n            const responseJson = await fetch(url);\r\n\r\n            const response: ShowsInfo = await responseJson.json();\r\n\r\n            console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n            setShowsInfo(response);\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchShowsInfo();\r\n\r\n    }, []);\r\n\r\n    const eventsAddedTodayCount = getAddedTodayShows().length;\r\n    const haveEventsAddedToday = eventsAddedTodayCount > 0;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Paper elevation={0} square style={{ height: \"100vh\" }}>\r\n                <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n                    <Grid item>\r\n                        <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n                    </Grid>\r\n                    {\r\n                        isLoading ? <Backdrop open={true}><CircularProgress color=\"inherit\" /></Backdrop> : (\r\n                            <Grid item container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"stretch\">\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"primary\" component={Link} to={'/giglist/false'} fullWidth>\r\n                                        <span>Future Events</span>&nbsp;\r\n                                        {\" \"}\r\n                                        <Chip variant=\"default\" color=\"secondary\" size=\"small\" label={getFutureShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/false/1'} fullWidth>\r\n                                        <div className={haveEventsAddedToday ? styles.addedTodayNonZero : undefined}>\r\n                                            Added Today&nbsp;\r\n                                            <Chip variant=\"default\" color=\"primary\" size=\"small\" label={eventsAddedTodayCount} />\r\n                                        </div>\r\n                                        {/* {isLoading ? null : <span>&nbsp;({getAddedTodayShows().length})</span>} */}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/false/3'} fullWidth>\r\n                                        <span>\r\n                                            Added In Last 3 Days\r\n                                        </span>&nbsp;\r\n                                        {/* {isLoading ? null : <span>&nbsp;({getAddedWithin3DaysShows().length})</span>} */}\r\n                                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={getAddedWithin3DaysShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/false/7'} fullWidth>\r\n                                        <span>\r\n                                            Added In Last 7 Days\r\n                                        </span>&nbsp;\r\n                                        {/* {isLoading ? null : <span>&nbsp;({getAddedWithin7DaysShows().length})</span>} */}\r\n                                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={getAddedWithin7DaysShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" color=\"secondary\" component={Link} to={'/giglist/true/-1'} fullWidth>\r\n                                        <span>All Events</span>&nbsp;\r\n                                        {\" \"}\r\n                                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={getAllShows().length} />\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport DetailsIcon from \"@material-ui/icons/Details\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { ShowsInfo, Show } from \"../models/models\";\r\nimport {\r\n    CircularProgress,\r\n    Backdrop,\r\n    Chip,\r\n    Grid,\r\n    Hidden,\r\n    Button,\r\n    IconButton,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    Formik,\r\n    Form,\r\n    useField,\r\n    FieldAttributes,\r\n} from \"formik\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        // backgroundColor: theme.palette.common.black,\r\n        // color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 650,\r\n        // maxWidth: 500\r\n    },\r\n});\r\n\r\nconst getDayName = (date: Date) => {\r\n    return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n};\r\n\r\nconst getDateFormatted = (date: Date) => {\r\n    const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n    return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n};\r\n\r\ninterface Props {\r\n    showPastEvents: boolean;\r\n\r\n    days?: number;\r\n}\r\n\r\ninterface FormValues {\r\n    artistFilter: string;\r\n}\r\n\r\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\r\n    placeholder,\r\n    ...props\r\n}) => {\r\n    const [field, meta] = useField<{}>(props);\r\n    const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n    return (\r\n        <TextField\r\n            placeholder={placeholder}\r\n            {...field}\r\n            helperText={errorText}\r\n            autoComplete=\"off\"\r\n            error={!!errorText}\r\n        />\r\n    );\r\n};\r\n\r\nconst DenseTable: React.FC<Props> = (props) => {\r\n    console.log(\"DenseTable : Start Render\");\r\n\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showPastEvents] = useState(props.showPastEvents);\r\n    const [days] = useState(props.days);\r\n    // const [artistFilter, setArtistFilter] = useState(\"\");\r\n    const [dateRelevantShows, setDateRelevantShows] = useState<Show[]>([]);\r\n\r\n    const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n        lastUpdated: new Date(),\r\n        shows: [\r\n            // {\r\n            //     id: \"1\",\r\n            //     venue: \"Fleece\",\r\n            //     artists: [\r\n            //         {\r\n            //             name: \"Chuck P\"\r\n            //         }\r\n            //     ],\r\n            //     isCancelled: false,\r\n            //     isSoldOut: false,\r\n            //     date: new Date()\r\n            // }\r\n        ],\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     // setDateRelevantShows(getRelevantShows(showsInfo.shows));\r\n    //     console.log(\"useEffect:artistFilter\");\r\n    // }, [artistFilter]);\r\n\r\n    const isRecentlyAdded = (show: Show, thresholdInDays = 1) => {\r\n        if (!show.addedDate) {\r\n            return false;\r\n        }\r\n\r\n        const addedDate = new Date(show.addedDate);\r\n        const currentDate = new Date();\r\n\r\n        const millisecondsSinceAdded = currentDate.getTime() - addedDate.getTime();\r\n\r\n        const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n        const thresholdInMilliseconds = thresholdInDays * millisecondsPerDay;\r\n\r\n        const result = millisecondsSinceAdded < thresholdInMilliseconds;\r\n\r\n        return result;\r\n    };\r\n\r\n    // const getInDateRangeShows = (): Show[] => {\r\n    //     if (!showsInfo) {\r\n    //         return [];\r\n    //     }\r\n\r\n    //     const { shows } = showsInfo;\r\n\r\n    //     if (showPastEvents) {\r\n    //         return shows;\r\n    //     }\r\n\r\n    //     const results = shows.filter(dateRangeShowFilter);\r\n\r\n    //     return results;\r\n    // }\r\n\r\n    const isFutureEvent = (show: Show) => {\r\n        if (!show.date) {\r\n            return false;\r\n        }\r\n\r\n        const eventDate = new Date(show.date);\r\n        eventDate.setHours(23, 59, 0, 0);\r\n\r\n        let currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0);\r\n\r\n        return eventDate >= currentDate;\r\n    };\r\n\r\n    const dateRangeShowFilter = (show: Show) => {\r\n        let willShowEvent = false;\r\n\r\n        if (showPastEvents) {\r\n            willShowEvent = true;\r\n        } else {\r\n            willShowEvent = isFutureEvent(show);\r\n        }\r\n\r\n        return willShowEvent;\r\n    };\r\n\r\n    const addedDateRangeShowFilter = (show: Show) => {\r\n        let willShowEvent = false;\r\n\r\n        if (days === -1) {\r\n            willShowEvent = true;\r\n        } else {\r\n            willShowEvent = isRecentlyAdded(show, days);\r\n        }\r\n\r\n        return willShowEvent;\r\n    };\r\n\r\n    // const getInAddedDateRangeShows = (shows: Show[]): Show[] => {\r\n    //     if (!shows) {\r\n    //         return [];\r\n    //     }\r\n\r\n    //     // const { shows } = showsInfo;\r\n\r\n    //     if (days === -1) {\r\n    //         return shows;\r\n    //     }\r\n\r\n    //     const inEventDateRangeShows = shows.filter(dateRangeShowFilter);\r\n\r\n    //     const results = inEventDateRangeShows.filter(show => addedDateRangeShowFilter(show));\r\n\r\n    //     return results;\r\n    // }\r\n\r\n    const getArtistFilterShows = (artistFilter: string): Show[] => {\r\n        //     const results = this.inDateRangeShows.filter(show => {\r\n        console.log(\"getArtistFilterShows\");\r\n\r\n        if (!artistFilter) {\r\n            return dateRelevantShows;\r\n        }\r\n\r\n        const results = dateRelevantShows.filter((show) => {\r\n            if (!artistFilter) {\r\n                return true;\r\n            }\r\n\r\n            // if (artistFilter.length < 2) {\r\n            //     return true;\r\n            // }\r\n\r\n            const showArtistsText = show.artists.reduce(\r\n                (previousArtistsResult, currentArtist, currentArtistIndex) => {\r\n                    const currentArtistText = currentArtist.name;\r\n\r\n                    return currentArtistIndex === 0\r\n                        ? currentArtistText\r\n                        : previousArtistsResult + \" \" + currentArtistText;\r\n                },\r\n                \"\"\r\n            );\r\n\r\n            return (\r\n                showArtistsText.toLowerCase().indexOf(artistFilter.toLowerCase()) > -1\r\n            );\r\n        });\r\n\r\n        return results;\r\n    };\r\n\r\n    const getDateRelevantShows = (shows: Show[]): Show[] => {\r\n        let filteredShows = shows;\r\n\r\n        filteredShows = filteredShows.filter(dateRangeShowFilter);\r\n\r\n        if (days !== -1) {\r\n            filteredShows = filteredShows.filter(addedDateRangeShowFilter);\r\n        }\r\n\r\n        return filteredShows;\r\n    };\r\n\r\n    //   const getRelevantShows = (shows: Show[]): Show[] => {\r\n    //     // if (!shows) {\r\n    //     //     return [];\r\n    //     // }\r\n\r\n    //     // const { shows } = showsInfo;\r\n\r\n    //     let filteredShows = shows;\r\n\r\n    //     filteredShows = filteredShows.filter(dateRangeShowFilter);\r\n\r\n    //     if (days !== -1) {\r\n    //       filteredShows = filteredShows.filter(addedDateRangeShowFilter);\r\n    //     }\r\n\r\n    //     if (artistFilter) {\r\n    //       filteredShows = getArtistFilterShows(filteredShows);\r\n    //     }\r\n    //     return filteredShows;\r\n    //   };\r\n\r\n    const getRelevantShows = (artistFilter: string): Show[] => {\r\n        let filteredShows = dateRelevantShows;\r\n\r\n        if (artistFilter) {\r\n            filteredShows = getArtistFilterShows(artistFilter);\r\n        }\r\n\r\n        return filteredShows;\r\n    };\r\n\r\n    //   const handleArtistFilterChange = (e: React.ChangeEvent<any>): void => {\r\n    //     console.log(e.target.value);\r\n    //   };\r\n\r\n    useEffect(() => {\r\n        const fetchShowsInfo = async () => {\r\n            // console.log(\"fetchShowsInfo\");\r\n\r\n            const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n            const responseJson = await fetch(url);\r\n\r\n            const response: ShowsInfo = await responseJson.json();\r\n\r\n            // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n            setShowsInfo(response);\r\n            setDateRelevantShows(getDateRelevantShows(response.shows));\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchShowsInfo();\r\n    }, []);\r\n\r\n    return isLoading ? (\r\n        <Backdrop open={true}>\r\n            <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n    ) : (\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Formik initialValues={{ artistFilter: \"\" }} onSubmit={() => { }}>\r\n                        {({ values, errors, isSubmitting, handleChange }) => {\r\n                            // console.table(values);\r\n\r\n                            // if (values.artistFilter && values.artistFilter.length > 1) {\r\n                            //     setTimeout(function () {\r\n                            //         setArtistFilter(values.artistFilter);\r\n                            //     }, 30);\r\n                            // }\r\n\r\n                            const relevantShows = getRelevantShows(values.artistFilter);\r\n\r\n                            return (\r\n                                <Grid container direction=\"column\">\r\n                                    <Grid item container>\r\n                                        <Grid item>\r\n                                            <Form style={{ padding: \"0 30px 15px 15px\" }}>\r\n                                                <MyTextField\r\n                                                    placeholder=\"artist filter\"\r\n                                                    name=\"artistFilter\"\r\n                                                    type=\"input\"\r\n                                                />\r\n                                            </Form>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Chip\r\n                                                variant=\"default\"\r\n                                                color=\"secondary\"\r\n                                                size=\"small\"\r\n                                                label={relevantShows.length}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TableContainer component={Paper} square>\r\n                                            <Table\r\n                                                className={classes.table}\r\n                                                size=\"small\"\r\n                                                aria-label=\"a dense table\"\r\n                                            >\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <Hidden smDown>\r\n                                                            <StyledTableCell>Day</StyledTableCell>\r\n                                                        </Hidden>\r\n                                                        <StyledTableCell>Date</StyledTableCell>\r\n                                                        <StyledTableCell>Artists</StyledTableCell>\r\n                                                        <StyledTableCell>Venue</StyledTableCell>\r\n                                                        <StyledTableCell>Actions</StyledTableCell>\r\n                                                        <StyledTableCell>&nbsp;</StyledTableCell>\r\n                                                    </TableRow>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {/* {showsInfo.shows.filter(show => new Date(show.date) >= new Date()).map((show) => ( */}\r\n                                                    {relevantShows.map((show) => (\r\n                                                        <StyledTableRow key={Math.random()}>\r\n                                                            <Hidden smDown>\r\n                                                                <StyledTableCell>{getDayName(show.date)}</StyledTableCell>\r\n                                                            </Hidden>\r\n                                                            <StyledTableCell>\r\n                                                                {getDateFormatted(show.date)}\r\n                                                            </StyledTableCell>\r\n                                                            <StyledTableCell>\r\n                                                                {/* <pre>\r\n                                          {JSON.stringify(show, null, 2)}\r\n                                      </pre> */}\r\n                                                                <Grid container>\r\n                                                                    <Grid item xs={11}>\r\n                                                                        {show.artists.map((artist) => {\r\n                                                                            return (\r\n                                                                                <p key={`${show.id}.${artist.name}`}>\r\n                                                                                    {artist.name}\r\n\r\n                                                                                    {/* <span *ngIf=\"artist.stageTime\"\r\n                                                class=\"badge badge-pill badge-primary\"\r\n                                                style=\"margin-right: 10px;\"\r\n                                                title=\"Stage Time\">\r\n                                                {{artist.stageTime}}\r\n                                              </span>\r\n                                \r\n                                              <a *ngIf=\"artist.videoUrl\" [attr.href]=\"artist.videoUrl\">\r\n                                                <span\r\n                                                  class=\"badge badge-danger\"\r\n                                                  style=\"margin-right: 10px;\">\r\n                                                  Video\r\n                                                </span>\r\n                                              </a> */}\r\n                                                                                </p>\r\n                                                                            );\r\n                                                                        })}\r\n                                                                    </Grid>\r\n                                                                    <Grid item xs={1}>\r\n                                                                        <IconButton\r\n                                                                            aria-label=\"details\"\r\n                                                                            component={Link}\r\n                                                                            to={`/gigdetails/${show.id}`}\r\n                                                                        >\r\n                                                                            <DetailsIcon />\r\n                                                                        </IconButton>\r\n                                                                    </Grid>\r\n                                                                </Grid>\r\n                                                            </StyledTableCell>\r\n                                                            <StyledTableCell>{show.venue}</StyledTableCell>\r\n                                                            <StyledTableCell>\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    color=\"primary\"\r\n                                                                    size=\"small\"\r\n                                                                    component={Link}\r\n                                                                    to={`/gigdetails/${show.id}`}\r\n                                                                >\r\n                                                                    <span>View</span>\r\n                                                                </Button>\r\n                                                            </StyledTableCell>\r\n                                                            <StyledTableCell>\r\n                                                                <Grid container direction=\"column\" spacing={1}>\r\n                                                                    {show.isSoldOut && (\r\n                                                                        <Grid item>\r\n                                                                            <Chip\r\n                                                                                style={{\r\n                                                                                    backgroundColor: theme.palette.warning.main,\r\n                                                                                    color: theme.palette.warning.contrastText,\r\n                                                                                }}\r\n                                                                                size=\"small\"\r\n                                                                                label=\"Sold Out\"\r\n                                                                            />\r\n                                                                        </Grid>\r\n                                                                    )}\r\n                                                                    {show.isCancelled && (\r\n                                                                        <Grid item>\r\n                                                                            <Chip\r\n                                                                                style={{\r\n                                                                                    backgroundColor: theme.palette.error.main,\r\n                                                                                    color: theme.palette.error.contrastText,\r\n                                                                                }}\r\n                                                                                size=\"small\"\r\n                                                                                label=\"Cancelled\"\r\n                                                                            />\r\n                                                                        </Grid>\r\n                                                                    )}\r\n                                                                    {show.priceText && show.priceText.indexOf(\"£\") === 0 && (\r\n                                                                        <Grid item>\r\n                                                                            <Chip\r\n                                                                                style={{\r\n                                                                                    backgroundColor: theme.palette.info.main,\r\n                                                                                    color: theme.palette.info.contrastText,\r\n                                                                                }}\r\n                                                                                size=\"small\"\r\n                                                                                label={show.priceText}\r\n                                                                            />\r\n                                                                        </Grid>\r\n                                                                    )}\r\n                                                                    {show.notes && (\r\n                                                                        <Grid item>\r\n                                                                            <span\r\n                                                                                style={\r\n                                                                                    {\r\n                                                                                        // backgroundColor: theme.palette.info.main,\r\n                                                                                        // color: theme.palette.info.contrastText\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            >\r\n                                                                                {show.notes}\r\n                                                                            </span>\r\n                                                                        </Grid>\r\n                                                                    )}\r\n                                                                </Grid>\r\n\r\n                                                                {/* \r\n      \r\n                  <span *ngIf=\"show.priceText && show.priceText.indexOf('£') === 0\"\r\n                    class=\"badge badge-info\" style=\"margin-right: 10px;\">\r\n                    {{show.priceText}}\r\n                  </span>\r\n      \r\n                  <span *ngIf=\"show.notes\" style=\"margin-right: 10px;\">{{show.notes}}</span> */}\r\n                                                            </StyledTableCell>\r\n                                                        </StyledTableRow>\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n};\r\n\r\nexport default DenseTable;\r\n","import React from \"react\";\r\nimport { Paper, Grid, ThemeProvider, useTheme } from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\nimport DenseTable from \"./DenseTable\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n\r\n  // match?: any;\r\n}\r\n\r\n// interface RouterProps {\r\n//     match: any;\r\n// }\r\n\r\n// type PropsWithRouterParams = Props & RouterProps;\r\n\r\nconst GigList: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  // const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  // const theme = createMuiTheme({\r\n  //     palette: {\r\n  //         type: isDarkMode ? \"dark\" : \"light\",\r\n\r\n  //         primary: {\r\n  //             main: '#0b5994',\r\n  //         },\r\n  //         secondary: {\r\n  //             main: '#1d83c6',\r\n  //         },\r\n  //     },\r\n  // });\r\n\r\n  const { showPastEvents, days } = useParams();\r\n  const showPastEventsParam = showPastEvents === \"true\";\r\n  const daysParam = days === undefined ? -1 : +days;\r\n\r\n  // console.log(showPastEvents, showPastEventsParam);\r\n  // const propsAsAny = props as any;\r\n  // const { isDarkMode, setIsDarkMode } = propsAsAny;\r\n  // const match = propsAsAny.match;\r\n  // const showPastEvents = match && match.params && match.params.showPastEvents;\r\n\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\r\n        <Grid container direction=\"column\" spacing={1}>\r\n          <Grid item>\r\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n          </Grid>\r\n          <Grid item container justify=\"center\">\r\n            <DenseTable showPastEvents={showPastEventsParam} days={daysParam} />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default GigList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useTheme,\r\n  Grid,\r\n  Chip,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ShowsInfo } from \"../models/models\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // minWidth: 275,\r\n  },\r\n  // bullet: {\r\n  //   display: \"inline-block\",\r\n  //   margin: \"0 2px\",\r\n  //   transform: \"scale(0.8)\",\r\n  // },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    // marginBottom: 12,\r\n  },\r\n});\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst GigDetails: React.FC = () => {\r\n  const routeParams = useParams<RouteParams>();\r\n\r\n  const classes = useStyles();\r\n  // const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  const theme = useTheme();\r\n  // const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [id] = useState(routeParams.id);\r\n\r\n  const [showsInfo, setShowsInfo] = useState<ShowsInfo>({\r\n    lastUpdated: new Date(),\r\n    shows: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchShowsInfo = async () => {\r\n      // console.log(\"fetchShowsInfo\");\r\n\r\n      // https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls\r\n      // https://firebase.google.com/docs/reference/rest/database/\r\n      const url = `https://show01-cd72d.firebaseio.com/.json`;\r\n\r\n      const responseJson = await fetch(url);\r\n\r\n      const response: ShowsInfo = await responseJson.json();\r\n\r\n      // console.log(\"fetchShowsInfo\", \"response\", response);\r\n\r\n      setShowsInfo(response);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchShowsInfo();\r\n  }, []);\r\n\r\n  const getShowById = (id: string) => {\r\n    const idMatch = showsInfo.shows.find((show) => show.id && show.id === id);\r\n\r\n    return idMatch;\r\n  };\r\n\r\n  const show = getShowById(id);\r\n\r\n  const getDayName = (date: Date) => {\r\n    return new Date(date).toLocaleDateString(\"en-GB\", { weekday: \"short\" });\r\n  };\r\n\r\n  const getDateFormatted = (date: Date) => {\r\n    const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\r\n\r\n    return new Date(date).toLocaleDateString(\"en-GB\", options);\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Backdrop open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  ) : (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n        alignContent=\"stretch\"\r\n        style={{ height: \"100%\" }}\r\n      >\r\n        <Grid item xs={12}>\r\n          {!show && <h1>Event not found</h1>}\r\n\r\n          {show && (\r\n            <Card className={classes.root} variant=\"outlined\" square>\r\n              <CardContent>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  {getDayName(show.date)}, {getDateFormatted(show.date)}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  {show.artists[0].name}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  {show.venue}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"div\">\r\n                  <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Artists\r\n                </Typography>\r\n                  <Grid container direction=\"column\" spacing={1}>\r\n                    {show.artists.map((artist) => {\r\n                      return (\r\n                        <Grid item container key={`${show.id}.${artist.name}`}>\r\n                          <Grid item xs={4}>\r\n                            {artist.name}\r\n                          </Grid>\r\n\r\n                          <Grid item xs={4}>\r\n                            {artist.stageTime && (\r\n                              <Chip\r\n                                style={{\r\n                                  backgroundColor: theme.palette.info.main,\r\n                                  color: theme.palette.info.contrastText,\r\n                                }}\r\n                                size=\"small\"\r\n                                label={artist.stageTime}\r\n                              />\r\n                            )}\r\n                          </Grid>\r\n\r\n                          <Grid item xs={4}>\r\n                            {artist.videoUrl && (\r\n                              <a href={artist.videoUrl}>\r\n                                <Chip\r\n                                  style={{\r\n                                    backgroundColor: theme.palette.info.main,\r\n                                    color: theme.palette.info.contrastText,\r\n                                  }}\r\n                                  size=\"small\"\r\n                                  label=\"Video\"\r\n                                />\r\n                              </a>\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    spacing={1}\r\n                    style={{ marginTop: 10 }}\r\n                  >\r\n                    {show.isSoldOut && (\r\n                      <Grid item>\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.warning.main,\r\n                            color: theme.palette.warning.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label=\"Sold Out\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {show.isCancelled && (\r\n                      <Grid item>\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.error.main,\r\n                            color: theme.palette.error.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label=\"Cancelled\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {show.priceText && show.priceText.indexOf(\"£\") === 0 && (\r\n                      <Grid item>\r\n                        <Chip\r\n                          style={{\r\n                            backgroundColor: theme.palette.info.main,\r\n                            color: theme.palette.info.contrastText,\r\n                          }}\r\n                          size=\"small\"\r\n                          label={show.priceText}\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {show.notes && (\r\n                      <Grid item>\r\n                        <span\r\n                          style={\r\n                            {\r\n                              // backgroundColor: theme.palette.info.main,\r\n                              // color: theme.palette.info.contrastText\r\n                            }\r\n                          }\r\n                        >\r\n                          {show.notes}\r\n                        </span>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                {/* <Button size=\"small\">Learn More</Button> */}\r\n                <Typography variant=\"body2\" component=\"div\">\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    style={{ marginLeft: 10, marginRight: 10 }}\r\n                  >\r\n                    {show.addedDate && (\r\n                      <Grid item>\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          display=\"block\"\r\n                          gutterBottom\r\n                        >\r\n                          Added: {getDayName(show.addedDate)},{\" \"}\r\n                          {getDateFormatted(show.addedDate)}\r\n                        </Typography>\r\n                      </Grid>\r\n                    )}\r\n                    {show.id && (\r\n                      <Grid item>\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          display=\"block\"\r\n                          gutterBottom\r\n                        >\r\n                          Id: {show.id}\r\n                        </Typography>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </Typography>\r\n              </CardActions>\r\n            </Card>\r\n          )}\r\n\r\n          {/* <pre>{JSON.stringify(getShowById(id), null, 2)}</pre> */}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n};\r\n\r\nexport default GigDetails;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n// import { blue, green, amber, blueGrey, red, cyan, indigo, lightBlue, grey, teal } from \"@material-ui/core/colors\";\r\n\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Home from \"./components/Home\";\r\nimport GigList from \"./components/GigList\";\r\nimport GigDetails from \"./components/GigDetails\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: \"#0b5994\",\r\n      },\r\n      secondary: {\r\n        main: \"#1d83c6\",\r\n      },\r\n    },\r\n  });\r\n\r\n  // const theme = createMuiTheme({\r\n  //   palette: {\r\n  //     type: isDarkMode ? \"dark\" : \"light\",\r\n  //     primary: blue,\r\n  //     secondary: blue,\r\n  //   },\r\n  // });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          {/* <Route path=\"/\" exact component={Home} /> */}\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route\r\n            path=\"/giglist/:showPastEvents/:days?\"\r\n            render={() => (\r\n              <GigList isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          <Route path=\"/gigdetails/:id\" render={() => <GigDetails />} />\r\n\r\n          {/* <Route path=\"/\" render={() => <div>404</div>} /> */}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}